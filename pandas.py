# -*- coding: utf-8 -*-
"""Pandas.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qi-TjPQRKRGaVH2xIGCgTrVIiqhHmPvW
"""

import pandas as pd
import numpy as np

"""creating own series and accessing"""

my_series = [5,6,7,8,9,2]
my_var = pd.Series(my_series)
my_var[3]

"""adding labels"""

my_index = ["A","B","C","D","E","F"]
my_var2 = pd.Series(my_series,my_index)
my_var2["B"]

"""key-value dictionary"""

cars = {"Tesla":12,"merc":42,"BMW":3}
my_var3 = pd.Series(cars)
my_var3

"""creating data using numpy"""

my_data = np.random.randn(4,3)
my_r = ["A","B","C","D"]
my_c = ["Monday","Tuesday","Wednesday"]
my_df = pd.DataFrame(my_data,my_r,my_c)
my_df

"""importing csv files"""

data = pd.read_csv("/content/dogs.csv")
data

"""pulling out rows"""

data.loc[0]
data.loc[[0,5,8]]

"""first five rows"""

data.head()

"""certain rows from top"""

data.head(6)

"""last 5 rows"""

data.tail()

"""certain number of last rows"""

data.tail(6)

"""dataframe info"""

data.info()

"""shape of rows and columns"""

data.shape

"""data types"""

data.dtypes

"""dimensions"""

data.ndim

"""stats about data"""

data.describe()

"""descibe specific columns"""

data['Breed'].describe()

"""select specific columns using bracket, dot and loc"""

data['DogName']
data.Breed
data.loc[:,'Color']

"""counting data in df"""

data.count()

data['Color'].value_counts(ascending=True)

"""with and withoiut null"""

data['DogName'].value_counts(dropna=False)

"""relative frequency or percentage"""

data['Color'].value_counts(normalize=True)

"""Get specific item count

count unique values
"""

data.groupby('Color').size()

"""count unique values count"""

data.groupby('Color').count()

"""get a count of all the columns across all columns

adding new columns with specific values
"""

gender = ["Male","Female","Male","Female","Male","Female","Male","Female","Male","Female"]
data["Gender"] = gender
data

"""adding default values"""

data["Alive/Dead"] = [True]*len(data)
data

"""add nan values"""

data["Show dog"] = [np.nan]*len(data)
data

"""add columns with .insert() -- allows position"""

data.insert(1,"Adopted",[True]*len(data))
data

"""add columns with .assign() --- creates new dataframe"""

data2 = data.assign(New = [1,2,3,4,5,6,7,8,9,10])
data2

"""delete column"""

data.drop("Gender",axis = 1,inplace=True)
data

"""delete rows"""

data.drop(3,axis=0,inplace=True)
data

"""grabbing rows and points and subsets from  dataframe

rows using location
"""

data.loc[2]

"""using index"""

data.iloc[3]

"""specific point-- ['Row','Col']"""

data.loc[1,"DogName"]

"""subsets"""

data.loc[[1,4],["DogName","Breed","Color"]]

"""conditional selections"""

data2 = (data == 'Black')
data2

data[data=='Black']['Color']

data[data == 'Black'][['Color','Breed']]

data[(data['Color'] == 'Black') & (data['Breed'] == 'Labrador')]

"""change and reset index as anyother column"""

data

data.set_index("DogName",inplace=True)
data

data.reset_index(inplace=True)
data

"""fixing incomplete data"""

newd = {'A':[1,2,8],'B':[5,np.nan,8],'C':[1,2,3]}
newdf = pd.DataFrame(newd)
newdf

"""drop rows with na data"""

newdf.dropna()

"""drop col with na data"""

newdf.dropna(axis=1)

"""more than 1 set threshhold"""

newdf.dropna(thresh=2,axis=1)

"""replace this  with fillna"""

newdf.fillna(value = 1)

"""use math function to fillna"""

newdf.fillna(value=newdf['A'].mean())

"""pandas dataframe group by"""

stuff = {'Corporation':['Apple','Google','Meta','Apple','Google','Meta'],
         'Employee':['John','April','Wes','Beth','Justin','Steph'],
         'Salary':[200,220,190,130,120,150]}

df = pd.DataFrame(stuff)
df

company = df.groupby('Corporation')
company

company.sum()

"""how to apply functions to DFs"""

def times100(x):
  return x*100

df["Salary"].apply(times100)

df["Salary"] = df["Salary"].apply(times100)
df

"""apply funtions on multiple functions"""

def namer(x):
  return "codemy: "+x

df[["Corporation","Employee"]] = df[["Corporation","Employee"]].apply(namer)
df

"""sorting and ordering

ascending order
"""

df.sort_values("Salary")

"""descending order"""

df.sort_values("Salary",ascending=False)